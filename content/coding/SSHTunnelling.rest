SSH Tunnels - Why and How.
==========================

:date: 2014-01-22 20:25
:modified: 2014-01-31 20:25
:tags: coding, ssh
:category: Programming
:slug: SSH Tunnels
:author: Anthony Roy
:summary: How to create tunnels and what to use them for.
:status: draft

Tunnelling is a really useful way to get connectivity to services on other machines where firewall restrictions would otherwise stop you from getting that connectivity. Use cases for this include gaining access to services in test environments from your development machine in order to test your applications against real endpoints or connecting from a laptop over VPN to a desktop machine. The following examples show forward and reverse tunnels and how they can be combined to tunnel from one machine to another via a third that both can access.

SSH Tunnel
----------

The basic command for setting up a tunnel is as follows:

.. code-block:: bash

    ssh -L <local_port>:<destination_host>:<destination_port> <remote_user>@<remote_host>

The following commandline snippets show how you can tunnel through ssh in order to ftp a file onto a remote box and how to access a web port on a remote server locally.

.. code-block:: bash

    ssh -L 1234:ftp_server:21 middleman@188.88.88.88
    ssh -L 80:localhost:8080 middleman@188.88.88.88

In the first example we set up the tunnel through a middleman server that we have access to, and that has access to port 21 on the ftp_server. We can then ftp to and from ftp_server by connecting to port 1234 on our local machine.

The second example shows how we can expose a port (8080) on a server we have ssh access to TODO.

This sets up forwarding from the local machine on port 1234 through to port 21 on the remote machine. With this, assuming port 21 is blocked from your machine to the remote machine, you can still ftp things (in this example) by setting up a tunnel as above, but ftping to port 1234 on your local machine instead.

#SSH Reverse Tunnel
{{{bash
ssh -R <remote_port>:localhost:<local_port> <remote_user>@<remote_host>

e.g.

ssh -R 19999:localhost:22 sourceuser@138.47.99.99
}}}

The above sets up a reverse tunnel from the server 138.47.99.99 to your local machine using port 19999. This means that if you are on that remote machine (and assuming you cannot get to port 22 on your machine from the remote one) you can ssh onto your machine using:

{{{bash
ssh localhost -p 19999
}}}

Note - keep the session alive by opening a screen session on the remote server from your machine and running 'top' or similar in that session.

#Combined tunnel - ssh onto one of your machines from another via a middle server.

Say you have two machines (adam and bob) on different networks and you are not able to ssh from one to the other. Both have access to a third machine (malcolm) however. You can use that third machine to tunnel directly from the first to the second as follows:

On machine adam set up a tunnel to malcolm:
{{{
ssh -L 1234:localhost:1235 malcolm
}}}

On machine bob set up a reverse tunnel to malcolm:
{{{
ssh -R 1235:localhost:22 malcolm
}}}

On machine adam, ssh to bob with:
{{{
ssh -p 1234 localhost
}}}

The connections are as follows:
{{{
adam -> adam:1234 -> malcolm:1234 -> malcolm:1235 -> bob:22
}}}

Blah blah ssh tunnel balhe.

Example::

    ssh -R 1234:localhost:22 me@myserver:1234

Other text
